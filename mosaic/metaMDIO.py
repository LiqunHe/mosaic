"""
	Interface class to write and query metadata 

	:Created:	3/1/2014
 	:Author: 	Arvind Balijepalli <arvind.balijepalli@nist.gov>
	:License:	See LICENSE.TXT
	:ChangeLog:
	.. line-block::
		3/1/14		AB	Initial version
"""
import os
import time
from abc import ABCMeta, abstractmethod

class InsufficientArgumentsError(Exception):
	pass

class metaMDIO(object):
	"""
		.. warning:: |metaclass|

		This class provides the skeleton for storing metadata
		generated by algorithms. It also provides an interface to query metadata, for example in a 
		SQL database.

		:Properties:
			- `dbColumnNames` : a list of database column names
	"""
	__metaclass__=ABCMeta

	def __init__(self):
		self.pid=os.getpid()

	def initDB(self, **kwargs):
		"""
			Initialize a new database file.

			:Parameters: 
			The arguments passed to init change based on the method of file IO selected, in addition to 
			the common args below:
				- `dbPath` :		directory to store the MD database ('<full path to data directory>')
				- `colNames` : 	list of text names for the columns in the tables
				- `colNames_t` :	list of data types for each column. 
		"""
		# start by setting all passed keyword arguments as class attributes
		for (k,v) in kwargs.iteritems():
			setattr(self, k, v)

		if not hasattr(self, 'dbPath'):
			raise InsufficientArgumentsError("Missing arguments: 'dbPath' must be supplied to initialize {0}".format(type(self).__name__))
		if not hasattr(self, 'colNames'):
			raise InsufficientArgumentsError("Missing arguments: 'colNames' must be supplied to initialize {0}".format(type(self).__name__))
		if not hasattr(self, 'colNames_t'):
			raise InsufficientArgumentsError("Missing arguments: 'colNames_t' must be supplied to initialize {0}".format(type(self).__name__))

		self._initdb(**kwargs)

	def openDB(self, dbname, **kwargs):
		"""
			Open an existing database file.

			:Parameters: 
				- `dbname` :		directory to store the MD database ('<full path to data directory>')

			.. seealso:: The arguments passed to init change based on the method of file IO selected, in addition to the common args.
		"""
		self._opendb(dbname, **kwargs)

	@abstractmethod
	def _opendb(self, dbname, **kwargs):
		"""
			.. important:: |abstractmethod|
		"""
		pass

	@abstractmethod
	def _initdb(self, **kwargs):
		"""
			.. important:: |abstractmethod|
		"""
		pass

	@abstractmethod
	def closeDB(self):
		"""
			.. important:: |abstractmethod|
		"""
		pass

	@abstractmethod
	def writeRecord(self, data, table=None):
		"""
			.. important:: |abstractmethod|

			Write data to a specified table. By default table 
			is None. In this case sub-classes should fall back 
			to writing data to a default table.
		"""
		pass

	@abstractmethod
	def writeSettings(self, settingsstring):
		"""
			.. important:: |abstractmethod|

			Write the settings JSON object to the database.
		"""
		pass

	@abstractmethod
	def writeAnalysisLog(self, analysislog):
		"""
			.. important:: |abstractmethod|

			Write the analysis log string to the database.
		"""
		pass

	@abstractmethod
	def readSettings(self):
		"""
			.. important:: |abstractmethod|

			Read JSON settings from the database.
		"""
		pass

	@abstractmethod
	def readAnalysisLog(self):
		"""
			.. important:: |abstractmethod|

			Read the analysis log from the database.
		"""
		pass


	@abstractmethod
	def _colnames(self):
		"""
			.. important:: |abstractmethod|
		"""
		pass

	@abstractmethod
	def queryDB(self, query):
		"""
			.. important:: |abstractmethod|

			Query a database. 
			:Parameters:
				- `query` : query string 

			.. seealso:: See specific implementations of metaMDIO for query syntax.
		"""
		pass

	@property 
	def dbColumnNames(self):
		return self._colnames()

	def _generateRecordKey(self):
		return float(time.time()+self.pid)

